    Howdy! So I've got immediate and compile modes basically
    working.  Now I've got two TODOs carrying over from the
    last log and I'll add some new ones. I'm gonna put this
    in the order I think they should probably be done, too:

        [ ] turn return_addr into a stack so i can call
            words from words
        [ ] make a "print" word and use it
        [ ] colon word store name somewhere
        [ ] semicolon should write tail

    From there, I think the roadmap will be fairly clear and
    largely driven by whatever I think will be useful or fun
    to grow the language.

        * Print dictionary/word tails
        * How to handle variables and strings
        * Interactive REPL
        * ANSI colors
        * Print current stack (automatically in REPL?)
        * Write out any word as an ELF executable?
        * Other debugging features?
        * Some simple benchmarks - size vs speed

    This whole thing is just an experiment in simplicity by
    taking a concept to extremes (in a good way) so I want
    to keep it tiny and comprehensible. Too many features
    will detract from that, so I'll need to pick them
    carefully.

    Okay, I'll start with turning the single return address
    I'm currently using for immediate word calls into a
    proper return stack. Here's the BSS reservations:

        return_stack: resb 512
        return_ptr:   resb 4

    And I've modified the CALLWORD and ENDWORD macros to
    push and pop the return stack appropriately.

    I think it's worth noting that I'm extremely not
    concerned about performance in immediate mode because
    I'm expecting that to be pretty much always be invoked
    by the user. The compiled code doesn't use this return
    stack because nothing ever gets called - it'll just be a
    continuous flow of instructions!

    Anyway, let's see what I've got when I try the new
    return stack:

Program received signal SIGSEGV, Segmentation fault.
get_next_token () at meow5.asm:73
73	        mov dword [eax], %%return_to ; CALLWORD

    Oh, wait! I forgot to initialize the return_ptr so it
    starts off pointing at the start of return_stack! So of
    course it's gonna segfault - I'm trying to mov to
    address 0!

Program received signal SIGSEGV, Segmentation fault.
0x0804a689 in return_ptr ()

    Oops! And that one is because I was trying to jump to
    the address in return_ptr, not to where it _pointed to_!

Program received signal SIGSEGV, Segmentation fault.
0x0804b000 in ?? ()

    Yuck, that one will be in the compiled code.

    I think I'll call it a night.

    Next night: Nope! It was in immediate word execution and
    it was pretty silly. I'm doing a bit of a hack to
    perform immediate word execution - passing a register to
    the CALLWORD macro instead of an address literal. Turns
    out, the register I was using for this was eax. And,
    naturally, that's the register I used to implement the
    new call stack stuff in CALLWORD!

    Changing this:

        CALLWORD eax

    To this:

        CALLWORD ebx

    And let's see if we can at least do what we could do
    before I made my changes:

$ mr
Immediate Meow!
Immediate Meow!
Meow.
Meow.
Meow.

    Nice. So then I can move on to new functionality. Let's
    try a nested call. I'll make some simple test words:

        DEFWORD foo
            CALLWORD bar
            push 0 ; for exit
            CALLWORD exit
        ENDWORD foo, "foo", (IMMEDIATE)

        DEFWORD bar
            CALLWORD meow
        ENDWORD bar, "bar", (IMMEDIATE)

    And calling them with this input string:

        db 'meow bar foo', 0

    Should result in three immediate meows and exit:

$ mr
Immediate Meow!
Immediate Meow!
Immediate Meow!

    Wow, nice. So I can allow words to call other words now,
    which will let me clean up some of the most redundant
    bits of code (like string printing).

    I think next will be a "print" word that prints
    null-terminated strings.
