    Well, I think the next thing to do is make the
    interpreter take input from STDIN. With that, I'll be
    able to not only play with it interactively, but also
    redirect and pipe instructions into it, which will mean
    being able to have some regression tests as well.

        [ ] Get input string from 'read' syscall
        [ ] Add some testing

    Testing is one of those things that a lot of people have
    strong opinions about. But I absolutely love having a
    reasonable number of tests in place to let me know that
    I haven't broken something. Tests let me be _more_
    creative and _more_ brave with the code because I can
    try something and know right away whether or not it
    works.

    I have come to _loathe_ manual testing because I've been
    in the Web dev world forever and testing on the web
    SUCKS. In a lot of cases, the state of the art is still
    refreshing a browser and clicking through a bunch of
    pages. When you're used to that, it is a _delight_ to be
    able to easily set up some STDIN/STDOUT tests on a
    command line!!!

    Okay, that's more than enough about that. It's time to
    get real input!

    Right off the bat, I know I'm going to need to handle
    this in three places:

        * get_token
        * eat_spaces
        * quote

    On the plus side, I'm happy with my input functionality
    (especially the string literals) and I don't regret
    how they've turned out. But now's when I have to pay the
    price for four separate methods that read input.

    This is definitely going to test my resolve to stick
    with the "inline all the things" redundant code. But I
    don't think "get_input" or whatever I end up calling it
    will be very long. Might even be under 100 bytes. So
    three copies shouldn't be too bad. :-)

    (When I wrote the above paragraphs, I thought I was
    going to have up to six copies, but I kept realizing
    that most of those places weren't actually reading a
    whole stream of input - they were relying on one of
    these three to do it.)

    Okay, stripped of comments, this is get_input:

            mov ebx, [input_file]
            mov ecx, input_buffer
            mov edx, INPUT_SIZE
            mov eax, SYS_READ
            int 0x80
            cmp eax, INPUT_SIZE
            jge %%done
            mov byte [input_buffer + eax], 0
        %%done:
            mov dword [input_buffer_pos], input_buffer

    It's tiny - just the Linux 'read' syscall to get more
    input into the input_buffer. The only interesting thing
    is that if we read more than an entire buffer's worth,
    it null-terminates the string.

    Now I gotta use it in (at least?) three places. Two of
    them also needed to be updated now that I understand
    what the esi and edi registers are for, ha ha. Anyway,
    here's a typical example from 'eat_spaces':

        cmp esi, input_buffer_end ; need to get more input?
        jl .continue    ; no, keep going
        GET_INPUT_CODE  ; yes, get some
        jmp .reset      ; got more input, reset and continue

    I kept simplifying until I got down to those four lines.

    But does it work? Just a couple dumb mistakes and
    then...

$  mr
hello
Could not find word "hello" while looking in IMMEDIATE  mode.
Exit status: 1

    Wow! I don't know why I typed "hello" as my first live
    input into this thing. But it totally worked. Ha ha, I
    probably don't need an unfound word to be a fatal error
    anymore. :-)

    How about something that *will* work:

$ mr
"Hello world!\n" print
Hello world!
Goodbye.
Exit status: 0

    Yay! My first live "Hello world" in this interpreter!

    I'm still exiting after one line of input. I'll have to
    figure that out. Do I read until an actual EOF character
    is encountered? I can't remember. I'm just super excited
    this works!

    So after all that hand-wringing about having a couple
    copies of this code, how much impact has that actually
    had?

    Here's the relevant bits from 'inspect_all':

get_input: 45 bytes IMMEDIATE COMPILE
get_token: 108 bytes IMMEDIATE
eat_spaces: 80 bytes IMMEDIATE COMPILE
quote: 348 bytes IMMEDIATE COMPILE

    Let's compare with the previous log07.txt results:

get_token: 55 bytes IMMEDIATE 
eat_spaces: 38 bytes IMMEDIATE COMPILE 
quote: 247 bytes IMMEDIATE COMPILE 

    Since I cleaned up some of the words, there wasn't an
    across-the board increase of 45 * 3 bytes.

    I'd like to see what the grand total has become. And
    I'll probably want to do that often. So I'll make a new
    option in my build.sh script:

  if [[ $1 == 'bytes' ]]
  then
      AWK='/^.*: [0-9]+/ {t=t+$2} END{print "Total bytes:", t}'
      echo 'inspect_all' | ./$F | awk -e "$AWK"
      exit
  fi

    Okay, let's see the damage:

$ ./build.sh bytes
Total bytes: 2816

    The last run in log07.txt was 2655 bytes, so the
    difference is:

        2816   (current)
      - 2655   (previous)
      ------
         161

    Ha ha, only 161 bytes difference, and since one of the
    three copies is needed, I only gained 116 bytes of
    "bloat". I think I can live with that on the x86
    platform. :-)

    Now I gotta figure out how to continue reading after one
    line of input.

    Oh, wait! One last thing. I had also set the input
    buffer to an artificially tiny size so I could make sure
    it was being refilled as needed. I'll add a DEBUG
    statement to see where that's happening.

    The buffer size is 16 bytes.

$ mr
GET_INPUT00000000
"This is a jolly long string to make sure we read plenty into input buffer a couple times.\n" print
GET_INPUT00000000
GET_INPUT00000000
GET_INPUT00000000
GET_INPUT00000000
GET_INPUT00000000
GET_INPUT00000000
This is a jolly long string to make sure we read plenty into input buffer a couple times.
Goodbye.
Exit status: 0

    Okay, perfect, that long line of input required 7 calls
    to 'get_input' to refill the input_buffer. Now I'll set
    it to a reasonable size. I've seen some conflicting
    stuff online, so I'll just take the coward's way out:

        %assign INPUT_SIZE 1024 ; size of input buffer

    Now to figure out how to keep reading after the first
    line (or token?) of input.

    Okay, so I do need to check the return value from 'read'
    because that's the only way I can know if I've really
    got an EOF instead of just "no more input at this
    moment" - as would be the case between when the user
    hits enter and types the next line of input.

    I also added a new eof global that I can trip as soon as
    any of the 'get_input' instances hits the end of input:

            cmp eax, 0            ; 0=EOF, -1=error
            jge %%normal
            mov dword [input_eof], 1  ; set EOF reached
        %%normal:

dave@cygnus~/meow5$ mr
"Hello world!\n" print
Hello world!

: loud_meow "MEOW!\n" print ;
loud_meow
MEOW!

exit
Exit status: 12

    Heh, that's so cool. I can finally interact with this
    thing for real. But CTRL+D doesn't exit. I had to type
    'exit' to make that happen.

    I'll add a debug to 'get_input' to see what 'read' is
    returning...

dave@cygnus~/meow5$ mr
"goodbye cruel world" print
read bytes: 0000001c
goodbye cruel world      <---- I typed ENTER here
read bytes: 00000001
                         <---- ENTER again here
read bytes: 00000001
read bytes: 00000000     <---- CTRL+D

read bytes: 00000001     <---- ENTER again
exit
read bytes: 00000005
Exit status: 1

    Okay, so I guess I'm not checking the input_eof flag
    correctly in my interpreter loop?

    No! Ha, perhaps you spotted it before I did in the
    assembly snippet? Here it is again:

            cmp eax, 0            ; 0=EOF, -1=error
            jge %%normal
            mov dword [input_eof], 1  ; set EOF reached
        %%normal:

    Silly mistake:

            jge %%normal

    should be

            jg %%normal

    so that 0 will trigger EOF!

    Okay, that pretty much worked. But there's still some
    inelegant code in the interpreter where I feel like I'm
    checking for input too many times and it's somehow still
    not enough.

    I was null-terminating it and I think I would be better
    off setting an upper bound on it.
