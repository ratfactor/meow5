    Welcome back! In the last log, I got string literals
    working with the 'quote' word.

    One thing lead to another and I ended up solving a lot
    of different problems so that now I can define words
    not just from "primitives" (machine code words written
    in assembler), but also words composed from *other*
    non-primitive words.

    So yeah, you can only make programs that print strings,
    but they are real programs.

    Okay, so now the fun TODOs!

        [ ] Pretty-print meta info about word!
        [ ] Loop through dictionary, list all names
        [ ] Loop through dictionary, pretty-print all

    (And I'm not being sarcastic or something - I'm really
    looking forward to these.)

    First, I need general number handling! I need to parse
    numbers from input and I need to be able to print
    numbers as strings.

        [ ] New word: str2num (ascii to integer)
        [ ] New word: num2str (integer to ascii)

    I'd also like to have the ability to intuitively append
    strings. Ideally:

        "There are " 5 " chickens."
        "Your name is '" username "'?"

    (I also don't have variables yet, so the username one is
    even more hypothetical. But you get the idea.)

    My new 'str2num' word seems to work. I realized I could
    use the exit status of the epplication since it is
    already popping a number from the stack (which I'd
    completely forgotten about, ha ha).

    I updated my `mr` (meow5 run) alias to print the exit
    status:

        alias mr=`./build.sh run ; echo "Exit status: $?"'

    The current parse/print number radix is set in a new
    "variable" currently set to decimal on startup:

        mov dword [radix], 10

    And created these words to manage the radix:

        radix (takes number from stack)
        dec  - sets radix to 10
        hex  - sets radix to 16
        oct  - sets radix to 8
        bin  - sets radix to 2

    Now I'll try str2num out with a decimal number:

        42 exit

$ mr
Exit status: 42

    And I'll mess with it by giving it a hex number without
    updating the radix to hex:

        ff exit

$ mr
Could not find word "ff" while looking in IMMEDIATE mode.
Exit status: 1

    Now I'll compact the results a bit to not take up too
    much room here:

hex ff exit         <-- hexadecimal
Exit status: 255


oct 100 exit        <-- octal
Exit status: 64

bin 101010 exit     <-- binary
Exit status: 42         (uh...seems right)
bin 11111111 exit
Exit status: 255        (yup, that's definitely right)

    Alright! Now this is getting fun. It'll be even better
    when it's taking input from STDIN to be fully
    interactive.

    Number printing is interesting. So I could just have it
    print numbers when requested, like Forth's DOT (.) word.
    But to print some mixed strings and numbers would look
    like this:

        "You own " print 16 printnum " snakes." print

    And like I wrote above in this log, I'd rather have
    strings and numbers automatically appended like this:

        "You own " 16 " snakes." print

    But I'm not sure if that's a good idea or not because
    I'm going to either have to further complicate my
    interpreter (it's already doing look-ahead for quotes so
    I don't have to have a space like in Forth: " foo") or
    some up with something else.

    One thing I've thought about is having interpolated
    strings. As long as I have some unambiguous symbol, I
    could have it pop numbers off the stack and append them
    to the string as I go:

        16 "You own $ snakes." print

    I planed to have escapes anyway, so \$ for a literal '$'
    is no problem.

    Okay, I like that.

    So I need to write num2str now and then add number
    interpolation to my 'quote' word. This is gonna be cool!

    Next night: Wrote num2str. I've got a division error.
    Here's how I'm testing:

        ; test num2str
        push 42           ; num
        push dword [free] ; store here
        CALLWORD num2str
        pop eax        ; chars written

    First, let's double-check the input:

(gdb) break num2str
528	    pop ebp ; address of string destination
num2str () at meow5.asm:529
529	    pop eax ; number
num2str () at meow5.asm:530
530	    mov ecx, 0 ; counter of digit characters
531	    mov ebx, [var_radix]
532	    mov edx, 0
(gdb) p/a $ebp
$1 = 0x804b114 <data_area>  <-- addr for string storage
(gdb) p $eax
$2 = 42                     <-- num to convert
(gdb) p $ebx
$3 = 10                     <-- radix

    That's all good:

        string storage addr: 0x804b114
             num to convert: 42
                      radix: 10

    Now we'll start converting. I divide the number by the
    radix. The remainder is the digit that was less than the
    radix (so 0-9 for dec, 0-f for hex, etc.). The result of
    the division is the rest of the number.

(gdb) s
num2str.divide_next () at meow5.asm:534
534	    idiv ebx     ; eax / ebx = eax, remainder in edx
(gdb) p $eax
$6 = 4                      <-- quotient
(gdb) p $ebx
$7 = 10                     <-- radix (double-checking)
(gdb) p $edx
$8 = 2                      <-- remainder (digit to convert)

    Yup, that looks good. We've got the first digit (working
    lowest to highest) to convert to a character (2) and the
    rest of the number with the first digit gone (4).

    I convert to the character equivalent and store that on
    the stack temporarily. This is because I convert
    starting from the least significant digit, but we want
    the string to have the number in the expected order,
    starting with the greatest significant digit.

(gdb) s
535	    cmp edx, 9   ; digit bigger than 9? (radix allows a-z)
536	    jg .toalpha  ; yes, convert to 'a'-'z'
537	    add edx, '0' ; no, convert to '0'-'9'
538	    jmp .store_char
num2str.store_char () at meow5.asm:542
542	    push edx ; put on stack (pop later to reverse order)
543	    inc ecx
544	    cmp eax, 0        ; are we done converting?
545	    jne .divide_next  ; no, loop

    Now it's on to the next division:

Program received signal SIGFPE, Arithmetic exception.
num2str.divide_next () at meow5.asm:534
534	    idiv ebx     ; eax / ebx = eax, remainder in edx

    There it is. Well, I'm not dividing by 0, so that's
    good. But then I remember idiv is signed division, and
    I'm not doing signed integers just yet. Maybe that's it?

    Ah, a quick look at a reference:

        "32-bit division with IDIV requires EAX be
        sign-extended into EDX."

    Yeah, I don't want to do signed division anyway because
    I don't have the ability to parse or print negative
    numbers (yet?) so I should really be using DIV anyway:

Program received signal SIGFPE, Arithmetic exception.

    Nope! I know this isn't a divide-by-zero problem...

    Oh, I needed to read a bit more:

        "DIV Always divides the 64 bits value accross
        EDX:EAX by a value."

    Oh, right, I need to clear EDX to 0 in my division loop
    because it currently holds the character to convert. It
    makes total sense that the answer is overflowing. I was
    dividing by a huge 64-bit number the second time around!

    So I just need to clear edx before my division:

533	    mov edx, 0   ; div actually divides edx:eax / ebx!
534	    div ebx      ; eax / ebx = eax, remainder in edx
535	    cmp edx, 9   ; digit bigger than 9? (radix allows a-z)
(gdb) p $eax
$1 = 0
(gdb) p $edx
$2 = 4

    That's got it! The final digit (remainder after
    division) is 4 and there's nothing left to divide after
    that (quotient is 0).

    Once it sees the rest of the number is now 0, I store
    the string at the address provided and return the number
    of characters written (digits in radix) on the stack:

554	    push eax  ; return num chars written
end_num2str () at meow5.asm:149
149	    mov eax, [return_addr] ; RETURN
(gdb) p $eax
$1 = 2
(gdb) x/s $ebp
0x804b114 <data_area>:	"42"

    Correct! Two characters were written, and the string is
    "42", my value in decimal!

    Since I can now, I'll make the test print real nice and
    use the exit value to show the number of digits written
    (to make sure it's correct):

        ; test num2str
        CALLWORD decimal
        push dword 42     ; num
        push dword [free] ; store here
        CALLWORD num2str
        PRINTSTR "Answer: "
        push dword [free] ; print from here
        CALLWORD print
        CALLWORD newline
        CALLWORD exit     ; stack still has chars written

$ mr
Answer: 42
Exit status: 2

    Correct. Let's see some others:

        CALLWORD oct
        push dword 64

Answer: 100
Exit status: 3

        CALLWORD hex
        push dword 3735928559

Answer: deadbeef
Exit status: 8

        CALLWORD bin
        push dword 7

Answer: 111
Exit status: 3

        CALLWORD bin
        push dword 257

Answer: 100000001
Exit status: 9

    Looks good! Now I'm kinda wishing the interpreter was
    interactive because that would have been way more fun
    than changing the assembly test for each run. But
    that'll be coming up soon enough.

    After sleeping on it, I'm really excited about the idea
    of string interpolation using '$' as a placeholder. So
    I'll make that the next todo:

        [ ] Add "$" placeholders so the 'quote' word so it
            can interpolate numbers from the stack into the
            string.

    I suspect the hard part will be remembering to push the
    stack values in the opposite order that they appear in
    the string...so we'll see what that's like in practice.

    Okay, I've got it working, but only just barely. It
    feels incredibly fragile. In particular, the interpreter
    has become way too complicated for my taste. Juggling
    registers willy-nilly and using the stack when I run out
    of places to put things is just sloppy.

    It does work. Cleaned up example:

        42 "The answer is $." print
        42 hex "The answer is 0x$ in hex." print
        42 bin "The answer is $ in computer." print
        42 oct "The answer is $ in octal." print

    Output:

The answer is 42.
The answer is 0x2a in hex.
The answer is 101010 in computer.
The answer is 52 in octal.

    Which is really cool. But I need to get my mess under
    control.

    For one thing, I've been using the registers very
    inconsistantly because I don't have any plan regarding
    where to put stuff.

    This article has helped a ton:

        https://www.swansontec.com/sregisters.html

    I'm not sure I'm going to re-write EVERYTHING to
    follow these guidelines, but new stuff definitely will
    and I'm going to immediately switch the 'quote' word to
    use the esi and edi registers!

    Using esi and edi in the 'quote' word helped make the
    usage much clearer and simplified some of the address
    manipulation considerably (the source and destination
    pointers aren't always moving in sync because escapes
    and placeholders in the source string may expand to a
    different number of characters in the destination
    string.

    Another thing that makes the interpreter so fragile is
    the way I have to juggle registers and the stack around
    to check for a valid numeric literal when an input token
    doesn't match any of the exisitng words.

    So what I'm thinking is that just like quote, I'll test
    for tokens that start with a number and handle them
    _before_ trying to find them in the dictionary.

    Consequently, I won't be able to start any word or
    variable names with a number. (Like Forth allows.)
    In exchange, it should simplify the interpreter a fair
    amount in some messy areas.

        [ ] Break out 'number' into separate word that does
            pre-check like 'quote'.

    This will also give it a nice symetry with the way I'm
    handling string literals (my first big departure from
    pur Forth syntax).

    Three sleepy nights later: Well, it works...but I've now
    exposed another problem.

    This is what the top of my interpreter loop looks like:

        get_next_token:
            CALLWORD eat_spaces ; skip whitespace
            CALLWORD quote      ; handle any string literals
            CALLWORD number     ; handle any number literals
            CALLWORD get_token

    It's nice and neat and readable. The problem is that it
    doesn't work unless you have an optional quote followed
    by an optional number followed by a non-string,
    non-quote token.

    Two strings in a row or a number followed by a string or
    various other combos won't work.

    Here's what needs to happen:

        interpreter loop:
            eat spaces
            if quote
                make string literal
                restart interpreter loop
            if number
                make number literal
                restart interpreter loop
            if token
                find/execute/compile
                restart interpreter loop
            else
                error

    So as much as I liked having 'quote' and 'number' handle
    all aspects of those respective inputs, it's just making
    everying too interdependant. I need to break them up
    into even smaller words and give more control back to
    the interpreter where it belongs.

    So more refactoring awaits me before I can do the fun
    stuff. Ah well, this is where the "slow and steady"
    approach wins - I know I'll eventually push through this
    kinda boring housekeeping stuff.

    Next night: Progress made on that refactor. Then there's
    a segfault. So that's what I'll work on tomorrow night.
